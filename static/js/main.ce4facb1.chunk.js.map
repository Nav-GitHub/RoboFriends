{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","searchChange","className","type","placeholder","onChange","Card","name","id","email","src","alt","CardList","robots","cardsArray","map","user","i","key","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0OAaeA,EAZG,SAACC,GAAW,IACrBC,EAAgBD,EAAhBC,aACL,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCAAmCC,KAAM,SAASC,YAAY,gBACxEC,SAAYJ,MCQbK,EAbF,SAACN,GAAW,IACdO,EAAkBP,EAAlBO,KAAMC,EAAYR,EAAZQ,GAAIC,EAAQT,EAARS,MACjB,OACI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,6BACI,4BAAKJ,GACL,2BAAIE,MCgBLG,EAtBE,SAACZ,GAAU,IAKjBa,EAAUb,EAAVa,OACDC,EAAaD,EAAOE,KAAI,SAACC,EAAKC,GAChC,OACA,kBAAC,EAAD,CACIC,IAAKL,EAAOI,GAAGT,GACfA,GAAIK,EAAOI,GAAGT,GACdD,KAAMM,EAAOI,GAAGV,KAChBE,MAAOI,EAAOI,GAAGR,WAGzB,OACI,6BACKK,ICXEK,EAPA,SAACnB,GACZ,OACI,yBAAKoB,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAkBC,OAAQ,UAChEvB,EAAMwB,WCeJC,E,kDAjBZ,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAQ,CAACC,UAAU,GAFV,E,8DAKAC,EAAOC,GAErBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAK9B,MAAOwB,a,GAdCQ,aC8CbC,G,wDAxCX,aAAc,IAAD,8BACT,gBAYJC,eAAgB,SAACC,GACb,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAZzC,EAAKZ,MAAQ,CACTb,OAAQ,GACRuB,YAAa,IAJR,E,gEAQQ,IAAD,OAChBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAAUF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAClB,OAAQ8B,S,+BAQjI,IAAD,OACEC,EAAiBd,KAAKJ,MAAMb,OAAOgC,QAAO,SAAAC,GAC5C,OAAQA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAErE,OAAgC,IAA7BjB,KAAKJ,MAAMb,OAAOoC,OACV,uCAGH,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAgB6B,KAAKI,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrB,OAAQ+B,W,GA/B5BM,IAAMlB,YCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAIP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.ce4facb1.chunk.js","sourcesContent":["import React from 'react';\r\nconst SearchBox = (props) => {\r\n    let {searchChange} = props; \r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' type ='search' placeholder='search robots'\r\n                onChange = {searchChange} \r\n            \r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {name, id, email} =props;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n// we can call this pure function or a dumb function \r\nconst CardList = (props) => {  \r\n    // to check the working of Error Boundary\r\n    // if(true) {\r\n    //     throw new Error('Noooooo!');\r\n    // }\r\n    const {robots} = props;\r\n    const cardsArray = robots.map((user,i) => {\r\n        return (\r\n        <Card \r\n            key={robots[i].id} \r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n        />);\r\n    })\r\n    return (\r\n        <div>\r\n            {cardsArray}   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList; ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{overflowY: 'scroll', border: '2px solid black',height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n} \r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n   constructor(props){\r\n       super(props);\r\n       this.state = {hasError: false}\r\n\r\n   } \r\n   componentDidCatch(error, info) \r\n   {\r\n       this.setState({hasError: true})\r\n   } \r\n   render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Error!!!Thats not Good</h1>\r\n        }\r\n        return this.props .children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {return response.json();}).then(users => {this.setState({robots: users})})\r\n    } \r\n        \r\n    \r\n    onSearchChange= (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n        \r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot=> {\r\n            return (robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase()));\r\n        })\r\n        if(this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } else{\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                        \r\n                        </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\n\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}